<?php

namespace landing\controllers;

use api\components\BaseController;
use landing\models\TypeGroupLanding;
use models\Product24;
use models\Products;
use models\PropertyValue24;
use yii\filters\AccessControl;
use yii\web\Controller;


class AjaxController extends Controller
{
    /**
     * {@inheritdoc}
     */
    private $data = [];
    private $error = false;
    private $message = '';
    private $body = [];
    private $lang = 'ru';
    private $arrLang = ['ru', 'en'];
    /**
     * @var array|mixed
     */
    private $suppliers = [];


    public function behaviors()
    {
        $behaviors['access'] = [
            'class' => AccessControl::className(),
            'rules' => [
                [
                    'allow' => true,
                    'actions' => ['*'],          // only auth users by access-token
                    'roles' => ['@'],
                ],
            ],
        ];
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'options' => [
                'class' => 'yii\rest\OptionsAction',
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return string
     */

    public function beforeAction($action)
    {
        if ($locale = \Yii::$app->request->headers->get('locale')) {
            if (in_array($locale, $this->arrLang)) {
                $this->lang = $locale;
            }
        }
        if(\Yii::$app->request->isPost){
            $this->body = \Yii::$app->request->getBodyParams();
        }
        $this->body = ($this->body != null ? $this->body : []);

        return parent::beforeAction($action);
    }


    public function actionList()
    {
        $limit = $this->body['limit'];
        $page = $this->body['page'];
        $offset = $page * $limit - $limit;

        if ($this->body['brand']) {

            //brand & type begin
            if ($this->body['productType']) {
                $idTypes = $this->body['productType'];
                $productsBrand = Products::find()
                    ->select(['products.*', 'ps.title_ru'])
                    ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                    ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                    ->where(['b24p.field_id' => 43, 'b24p.value' => $this->body['brand'], 'products.active' => 'Y'])
                    ->andWhere('products.price > 0')
                    ->limit($limit)
                    ->offset($offset)
                    ->all();
                $products = [];
                foreach ($productsBrand as $product) {
                    $types = Product24::findOne(['product_id' => $product->product_id, 'field_id' => 44]);
                    if (in_array($types->value, $idTypes))
                        $products[] = $product;
                }
                $brandFilter = TypeGroupLanding::getCheckboxSet(43, 43,$this->body['brand']);
                $typeFilter = TypeGroupLanding::getCheckboxSet(43, 44, $this->body['brand']);
            //brand & type end

            //brand begin
            } else {
                $products = Products::find()
                    ->select(['products.*', 'ps.title_ru'])
                    ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                    ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                    ->where(['b24p.field_id' => 43, 'b24p.value' => $this->body['brand'], 'products.active' => 'Y'])
                    ->andWhere('products.price > 0')
                    ->limit($limit)
                    ->offset($offset)
                    ->all();
                $brandFilter = TypeGroupLanding::getCheckboxSet(43, 43, $this->body['brand']);
                $typeFilter = TypeGroupLanding::getCheckboxSet(43, 44, $this->body['brand']);
            }
            //brand end

        //type begin
        } elseif ($this->body['productType']) {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                ->where(['b24p.field_id' => 44, 'b24p.value' => $this->body['productType'], 'products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->limit($limit)
                ->offset($offset)
                ->all();
            $brandFilter = TypeGroupLanding::getCheckboxSet(44, 43, $this->body['productType']);
            $typeFilter = TypeGroupLanding::getCheckboxAll(108);
        //type end

        //all begin
        } else {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->limit($limit)
                ->where(['products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->offset($offset)
                ->all();
            $brandFilter = TypeGroupLanding::getCheckboxAll(107);
            $typeFilter = TypeGroupLanding::getCheckboxAll(108);
        }
        //all end

        $prods = [];
        foreach ($products as $k => $product) {
            $prods[$k] = [
                'title' => $product->title_ru,
                'id' => $product->getUrl(),
                'logo' => $product->getLogo(),
                'price' => $product->price,
            ];
        }
        $ret = [
            'limit' => $limit,
            'page' => $page,
            'products' => $prods,
            'typeFilter' => $typeFilter,
            'brandFilter' => $brandFilter,
            'setBrandFilter' => $this->body['brand'],
            'setTypeFilter' => $this->body['productType'],
        ];
        return $this->renderPartial('index', [
            'page' => '',
            'action' => 'index',
            'result' => $ret
        ]);
//        return $ret;
    }

    public function actionSmart () {
        $limit = $this->body['limit'];
        $page = $this->body['page'];
        $offset = $page * $limit - $limit;

        if ($this->body['brand']) {

            //brand & type begin
            if ($this->body['productType']) {
                $idTypes = $this->body['productType'];
                $productsBrand = Products::find()
                    ->select(['products.*', 'ps.title_ru'])
                    ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                    ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                    ->where(['b24p.field_id' => 43, 'b24p.value' => $this->body['brand'], 'products.active' => 'Y'])
                    ->andWhere('products.price > 0')
                    ->limit($limit)
                    ->offset($offset)
                    ->all();
                $products = [];
                foreach ($productsBrand as $product) {
                    $types = Product24::findOne(['product_id' => $product->product_id, 'field_id' => 44]);
                    if (in_array($types->value, $idTypes))
                        $products[] = $product;
                }
                $brandFilterObject = TypeGroupLanding::getCheckboxSet(43, 43,$this->body['brand']);
                $typeFilterObject = TypeGroupLanding::getCheckboxSet(43, 44, $this->body['brand']);
                //brand & type end

                //brand begin
            } else {
                $products = Products::find()
                    ->select(['products.*', 'ps.title_ru'])
                    ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                    ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                    ->where(['b24p.field_id' => 43, 'b24p.value' => $this->body['brand'], 'products.active' => 'Y'])
                    ->andWhere('products.price > 0')
                    ->limit($limit)
                    ->offset($offset)
                    ->all();
                $brandFilterObject = TypeGroupLanding::getCheckboxSet(43, 43, $this->body['brand']);
                $typeFilterObject = TypeGroupLanding::getCheckboxSet(43, 44, $this->body['brand']);
            }
            //brand end

            //type begin
        } elseif ($this->body['productType']) {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                ->where(['b24p.field_id' => 44, 'b24p.value' => $this->body['productType'], 'products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->limit($limit)
                ->offset($offset)
                ->all();
            $brandFilterObject = TypeGroupLanding::getCheckboxSet(44, 43, $this->body['productType']);
            $typeFilterObject = TypeGroupLanding::getCheckboxAll(108);
            //type end

            //all begin
        } else {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->limit($limit)
                ->where(['products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->offset($offset)
                ->all();
            $brandFilterObject = TypeGroupLanding::getCheckboxAll(107);
            $typeFilterObject = TypeGroupLanding::getCheckboxAll(108);
        }
        //all end

        $prods = [];
        foreach ($products as $k => $product) {
            $prods[$k] = [
                'title' => $product->title_ru,
                'id' => $product->getUrl(),
                'logo' => $product->getLogo(),
                'price' => $product->price,
            ];
        }

        $ret = [
            'limit' => $limit,
            'page' => $page,
            'products' => $prods,
            'typeFilter' => $this->getFilter($typeFilterObject),
            'brandFilter' => $this->getFilter($brandFilterObject),
            'setBrandFilter' => $this->body['brand'],
            'setTypeFilter' => $this->body['productType'],
        ];

//        return ['data' => json_encode($ret)];
        return $this->renderPartial('smartMenu', [
            'page' => '',
            'action' => 'index',
            'result' => ['data' => $ret , 'error' => $this->error, 'message' => $this->message]
        ]);
    }
    private function getFilter ($object)
    {
        $filter =[];
        foreach ($object as $ob) {
            $filter[$ob->id] = [
                'idType' => $ob->id,
                'nameType' => $ob->value
            ];
        }
        return $filter;
    }

    public function actionSearch () {
        $textSearch = $this->body['search'];

        $products = Products::find()
            ->select(['products.*', 'ps.title_ru'])
            ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
            ->limit(20)
            ->where(['products.active' => 'Y'])
            ->andWhere("ps.title_ru LIKE '%{$textSearch}%'")
            ->andWhere('products.price > 0')
            ->all();
        $prods = [];
        foreach ($products as $k => $product) {
            $prods[$k] = [
                'title' => $product->title_ru,
                'id' => $product->getUrl(),
                'logo' => $product->getLogo(),
                'price' => $product->price,
            ];
        }

        return $this->renderPartial('search', [
            'page' => '',
            'action' => 'index',
            'prods' => $prods
        ]);
    }
}
