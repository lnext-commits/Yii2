<?php

namespace landing\controllers;

use landing\models\TypeGroupLanding;
use models\Product24;
use models\Products;
use models\ProductsProperty24;
use models\PropertyValue24;
use Yii;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;

/**
 * Site controller
 */
class CategoryController extends Controller
{
    /**
     * {@inheritdoc}
     */

    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {
        try {
            return parent::beforeAction($action);
        } catch (BadRequestHttpException $e) {
        } // TODO: Change the autogenerated stub
    }

    /**
     * Displays homepage.
     *
     * @param null $brand
     * @param null $productType
     * @return string
     */

    public function actionIndex($brand = null, $productType = null)
    {
        $b24propertyBrandId = 107;
        $b24propertyProductTypeId = 108;

        $products = Products::find()
            ->select(['products.*', 'ps.title_ru'])
            ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
            ->where(['products.active' => 'Y'])
            ->limit(20)
            ->all();

        if ($brand) {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru', 'b24p.value'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                ->where(['b24p.field_id' => 43, 'b24p.value' => $brand, 'products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->limit(20)
                ->all();
            $type_filter = TypeGroupLanding::getCheckboxSet(43,44, [$brand]);
        } else {
            $type_filter = TypeGroupLanding::getCheckboxAll($b24propertyProductTypeId);
        }

        if ($productType) {
            $products = Products::find()
                ->select(['products.*', 'ps.title_ru'])
                ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
                ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
                ->where(['b24p.field_id' => 44, 'b24p.value' => $productType, 'products.active' => 'Y'])
                ->andWhere('products.price > 0')
                ->limit(20)
                ->all();
            $brand_filter = TypeGroupLanding::getCheckboxSet(44,43, [$productType]);
        } else {
            $brand_filter = TypeGroupLanding::getCheckboxAll($b24propertyBrandId);
//            echo "<pre>"; print_r($brand_filter); echo "</pre>"; die();
        }

        return $this->render('index', [
            'products' => $products,
            'brands' => $brand_filter,
            'productsType' => $type_filter,
            'brandId' => $brand,
            'productTypeId' => $productType
        ]);
    }







    /*
    private function getFilterSet ($idField1, $idField2, $b24pValue)
    {
        $products = Products::find()
            ->select(['products.*', 'ps.title_ru'])
            ->innerJoin('products_status ps', 'ps.product_id=products.product_id')
            ->innerJoin('b24_products b24p', 'b24p.product_id=products.product_id')
            ->where(['b24p.field_id' => $idField1, 'b24p.value' => $b24pValue, 'products.active' => 'Y'])
            ->andWhere('products.price > 0')
            ->all();
        $idType = [];
        $idTempType = 0;
        foreach ($products as $product) {
            $types = Product24::findOne(['product_id' => $product->product_id, 'field_id' => $idField2]);
            if ($types->value && $idTempType != $types->value) {
                $idType[] = $types->value;
                $idTempType = $types->value;
            }
        }
        if ($idType){
            return  PropertyValue24::find()
                ->where(['id' => $idType])
                ->all();
        }else{
           return $idType;
        }
    }
    private function getFilterAll ($b24propertyId)
    {
        $fieldId = 0;
        if ($b24propertyId == 107) $fieldId=43;
        if ($b24propertyId == 108) $fieldId=44;
        $result = [];
       $checksAll = PropertyValue24::find()
            ->where(['b24property_id' => $b24propertyId])
            ->all();
       foreach ($checksAll as $checkAll) {
           $Products = Product24::find()->where(['value' => $checkAll->id, 'field_id' => $fieldId])->all();
           foreach ($Products as $item) {
               if (Products::find()->where(['product_id' => $item->product_id, 'products.active' => 'Y'])->andWhere('products.price > 0')->all()) {
                   $result[$checkAll->id]=$checkAll;
               }
           }
       }
       return $result;
    }
*/
}
