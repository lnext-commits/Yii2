<?php

namespace models;

use bitrix\components\CRest;
use Yii;
use yii\db\ActiveRecord;

/**
 * Products model
 *
 * @property integer $id
 */
class Users24 extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%b24_users}}';
    }

    public static function getAllUsersForSelect()
    {
        $users =[];
        foreach (self::find()->select('DISTINCT(user_id)')->all() as $u => $user){
            $users[$u] = [
                'id' => $user->user_id,
                'title'  => self::getUser($user->user_id)
            ];
        }
        return $users;
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    static public function getUserFromB24ById(int $idUser)
    {
        $deal = CRest::call('user.get', [
            'id' => $idUser,
        ]);

        if ($deal && isset($deal['result']))
            return $deal['result'];

        return $deal;
    }

    static public function getUsersFromB24()
    {
        $deal = CRest::call('user.get');

        if ($deal && isset($deal['result']))
            foreach ($deal['result'] as $u => $user){
                $usId = $user['ID'];
                foreach ($user as $p => $value) {
                    if ($uf = UsersFields24::findOne(['type' => $p])) {
                        if(!$user24 = Users24::findOne(['user_id'=>$usId , 'users_field_id'=>$uf->id])){
                            $user24 = new Users24();
                        }
                        $user24->user_id = $usId;
                        $user24->users_field_id=$uf->id;
                        $user24->value = is_array($value)? json_encode($value) : $value;
                        $user24->save();
                    }
                }
            }

        return $deal;
    }


    static public function getUsersFieldsFromB24()
    {
        $deal = CRest::call('user.fields');

        if ($deal && isset($deal['result']))
            return $deal['result'];

        return null;
    }

    static public function getUser($id)
    {
        return (self::getUserName($id) . ' ' . self::getUserSurename($id));
    }

    static public function getUserName($id)
    {
        if ($name = self::findOne(['user_id' => $id, 'users_field_id' => 4])) {
            return $name->value;
        }
        return '';
    }

    static public function getUserSurename($id)
    {
        if ($surename = self::findOne(['user_id' => $id, 'users_field_id' => 5])) {
            return $surename->value;
        }
        return '';
    }

    static public function getUserType($id)
    {
        if ($type = self::findOne(['user_id' => $id, 'users_field_id' => 23])) {
            return $type->value;
        }
        return '';
    }

    static public function getAllUsers(){
        $users =[];
        foreach (self::find()->select('DISTINCT(user_id)')->all() as $u => $user){
            $users[$u] = [
                'value' => $user->user_id,
                'name'  => self::getUser($user->user_id)
            ];
        }
        return $users;
    }
}