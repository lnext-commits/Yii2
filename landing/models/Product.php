<?php

namespace landing\models;

use models\Products;
use models\Images;
use models\ProductsProperty;
use models\ProductsProperty24;
use models\PropertyValue24;


/**
 * Product model
 *
 * @property integer $id
 * @property string $title_ru
 */
class Product extends Products
{
    private $lang = 'ru';
    public $title_ru;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%products}}';
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getBarcode()
    {
        if ($barcode = Images::find()
            ->where(['relative_type' => 'product', 'type' => 'barcode', 'relative_id' => $this->product_id])
            ->orderBy('id DESC')->all()) {
            return $barcode;
        }
        return [];
    }

    public static function getProductByBrandId($id, $b24property_id)
    {
        return ProductsProperty24::find()
                ->where(['property_id'=> $b24property_id , 'value' => $id]);
    }

    public function getPackages()
    {
        if ($packages = Images::find()->where(['relative_type' => 'product', 'type' => 'packages', 'relative_id' => $this->product_id])->orderBy('id DESC')->all()) {
            return $packages;
        }
        return [];
    }

    public function getProductImages()
    {
        if ($img = Images::find()->where(['relative_type' => 'product', 'type' => 'image', 'relative_id' => $this->product_id])->orderBy('id DESC')->all()) {
            return $img;
        }
        return [];
    }

    public function getProductProperty()
    {
        $productsProperty = [];
        foreach (ProductsProperty::find()
                     ->from('products_property as pp')
                     ->select(["pp.value_{$this->lang} ppt" , "p.title_{$this->lang} pt" , "sb.title_{$this->lang} sbt"])
                     ->innerJoin('sub_property sb', 'sb.id = pp.sub_property_id')
                     ->innerJoin('property p', 'p.id = pp.property_id')
                     ->where(['pp.product_id' => $this->product_id])
                     ->asArray()->all() as $value){
            if(!key_exists($value['pt'],$productsProperty)){
                $productsProperty[$value['pt']]=[];
            }

            if(!key_exists($value['sbt'],$productsProperty[$value['pt']])){
                $productsProperty[$value['pt']][$value['sbt']] = $value['ppt'];
            }
        }
        return $productsProperty;
    }


}